name: 📚 Documentation Build & Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'pyproject.toml'
      - 'Makefile'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'pyproject.toml'
      - 'Makefile'
      - '.github/workflows/docs.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Build Documentation
  build:
    name: 🔨 Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        
    - name: 🔍 Validate Documentation Source
      run: |
        echo "📋 Documentation Source Validation"
        echo "=================================="
        
        # Check for required files
        required_files=(
          "docs/conf.py"
          "docs/index.rst" 
          "src/voice_recorder/__init__.py"
        )
        
        for file in "${required_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        # Validate Sphinx configuration
        python -c "
        import sys
        sys.path.insert(0, 'docs')
        try:
            import conf
            print('✅ Sphinx configuration valid')
        except Exception as e:
            print(f'❌ Sphinx configuration error: {e}')
            sys.exit(1)
        "
        
        # Check for circular imports
        python -c "
        try:
            import voice_recorder
            print('✅ Package imports successfully')
        except Exception as e:
            print(f'❌ Package import error: {e}')
            sys.exit(1)
        "
    
    - name: 🧹 Clean Previous Builds
      run: |
        echo "🧹 Cleaning previous builds..."
        make docs-clean || true
        rm -rf docs/_build docs/*.html docs/_static docs/_sources docs/_modules || true
        
    - name: 🏗️ Build Documentation
      run: |
        echo "🏗️ Building Sphinx documentation..."
        
        # Build with verbose output for debugging
        sphinx-build -b html -v -W --keep-going docs docs/_build/html
        
        # Verify build output
        if [[ ! -f "docs/_build/html/index.html" ]]; then
          echo "❌ Build failed: No index.html generated"
          exit 1
        fi
        
        echo "✅ Documentation built successfully"
        
    - name: 📊 Build Quality Report
      run: |
        echo "📊 Documentation Build Report"
        echo "============================="
        
        build_dir="docs/_build/html"
        
        # Count generated files
        html_count=$(find "$build_dir" -name "*.html" | wc -l)
        css_count=$(find "$build_dir" -name "*.css" | wc -l)
        js_count=$(find "$build_dir" -name "*.js" | wc -l)
        
        echo "📄 HTML files: $html_count"
        echo "🎨 CSS files: $css_count" 
        echo "⚡ JS files: $js_count"
        
        # Check critical files
        critical_files=(
          "$build_dir/index.html"
          "$build_dir/genindex.html"
          "$build_dir/search.html"
          "$build_dir/_static/theme.css"
        )
        
        echo ""
        echo "🔍 Critical Files Check:"
        for file in "${critical_files[@]}"; do
          if [[ -f "$file" ]]; then
            size=$(du -h "$file" | cut -f1)
            echo "✅ $(basename "$file") ($size)"
          else
            echo "❌ $(basename "$file") missing"
          fi
        done
        
        # Calculate total size
        total_size=$(du -sh "$build_dir" | cut -f1)
        echo ""
        echo "📏 Total documentation size: $total_size"
        
    - name: 🔗 Validate Links and References
      run: |
        echo "🔗 Validating internal links..."
        
        # Check for broken internal references
        python -c "
        import os
        import re
        from pathlib import Path
        
        build_dir = Path('docs/_build/html')
        broken_links = []
        
        for html_file in build_dir.rglob('*.html'):
            content = html_file.read_text(encoding='utf-8', errors='ignore')
            
            # Find internal links
            internal_links = re.findall(r'href=\"([^\"]*\.html[^\"]*?)\"', content)
            
            for link in internal_links:
                if link.startswith('http'):
                    continue
                    
                # Remove anchor fragments
                link_path = link.split('#')[0]
                if not link_path:
                    continue
                    
                # Resolve relative path
                target = (html_file.parent / link_path).resolve()
                
                if not target.exists():
                    broken_links.append(f'{html_file.name} -> {link}')
        
        if broken_links:
            print('❌ Broken internal links found:')
            for link in broken_links[:10]:  # Show first 10
                print(f'  - {link}')
            if len(broken_links) > 10:
                print(f'  ... and {len(broken_links) - 10} more')
        else:
            print('✅ All internal links valid')
        "
        
    - name: 📤 Prepare GitHub Pages Artifact
      run: |
        echo "📤 Preparing GitHub Pages deployment..."
        
        # Copy built documentation to docs/ for GitHub Pages
        cp -r docs/_build/html/* docs/
        
        # Ensure .nojekyll exists
        touch docs/.nojekyll
        
        # Create deployment summary
        cat > docs/deployment-info.json << EOF
        {
          "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit_sha": "${{ github.sha }}",
          "commit_ref": "${{ github.ref }}",
          "workflow_run": "${{ github.run_number }}",
          "python_version": "$(python --version)",
          "sphinx_version": "$(python -c 'import sphinx; print(sphinx.__version__)')"
        }
        EOF
        
        echo "✅ GitHub Pages artifact prepared"
        
    - name: 📋 Generate Deployment Summary
      run: |
        echo "## 📚 Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build Status | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| 📄 HTML Files | $(find docs/_build/html -name "*.html" | wc -l) |" >> $GITHUB_STEP_SUMMARY
        echo "| 📏 Total Size | $(du -sh docs/_build/html | cut -f1) |" >> $GITHUB_STEP_SUMMARY
        echo "| 🕐 Build Time | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔄 Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- 📖 [View Documentation](https://piotrlinski.github.io/voice-recorder/)" >> $GITHUB_STEP_SUMMARY
        echo "- 🏠 [Homepage](https://piotrlinski.github.io/voice-recorder/index.html)" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 [Search](https://piotrlinski.github.io/voice-recorder/search.html)" >> $GITHUB_STEP_SUMMARY
        echo "- 📚 [API Reference](https://piotrlinski.github.io/voice-recorder/api/index.html)" >> $GITHUB_STEP_SUMMARY
        
    - name: 🗂️ Upload Documentation Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

  # Job 2: Deploy to GitHub Pages
  deploy:
    name: 🚀 Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: 🔍 Post-Deployment Validation
      run: |
        echo "🔍 Validating deployment..."
        
        # Wait for deployment to be accessible
        sleep 30
        
        # Test main documentation URL
        url="${{ steps.deployment.outputs.page_url }}"
        
        echo "Testing: $url"
        
        # Check if site is accessible
        if curl -sSf -o /dev/null "$url"; then
          echo "✅ Documentation site is accessible"
        else
          echo "❌ Documentation site not accessible"
          echo "⏳ Note: It may take a few minutes for changes to propagate"
        fi
        
    - name: 📊 Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🎯 Deployment | ✅ Successful |" >> $GITHUB_STEP_SUMMARY
        echo "| 🌐 URL | [${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| 🕐 Deploy Time | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
        echo "| 📋 Environment | github-pages |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. 🔗 Visit the [documentation site](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
        echo "2. 🧪 Test all pages and functionality" >> $GITHUB_STEP_SUMMARY
        echo "3. 📱 Verify mobile responsiveness" >> $GITHUB_STEP_SUMMARY
        echo "4. 🔍 Check search functionality" >> $GITHUB_STEP_SUMMARY

  # Job 3: Quality Assurance (runs on PRs)
  quality-check:
    name: 🔍 Documentation QA
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: github-pages
        path: qa-docs/
        
    - name: 🧪 Extract and Analyze
      run: |
        cd qa-docs
        tar -xf artifact.tar
        
        echo "## 🔍 Documentation QA Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for accessibility issues
        echo "### ♿ Accessibility Check" >> $GITHUB_STEP_SUMMARY
        if grep -r "alt=" . >/dev/null; then
          echo "✅ Alt text found in images" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No alt text found - verify image accessibility" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for responsive design
        echo "### 📱 Responsive Design" >> $GITHUB_STEP_SUMMARY
        if grep -r "viewport" . >/dev/null; then
          echo "✅ Viewport meta tags found" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No viewport meta tags - mobile experience may be poor" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Performance analysis
        echo "### ⚡ Performance Analysis" >> $GITHUB_STEP_SUMMARY
        total_size=$(du -sh . | cut -f1)
        echo "📏 Total size: $total_size" >> $GITHUB_STEP_SUMMARY
        
        large_files=$(find . -size +1M -type f | wc -l)
        if [[ $large_files -gt 0 ]]; then
          echo "⚠️ Found $large_files files larger than 1MB" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No large files detected" >> $GITHUB_STEP_SUMMARY
        fi