#!/usr/bin/env python3
"""
Configuration script for local Whisper transcription.
"""

import os
import sys
from typing import Optional

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from voice_recorder.domain.models import (
    ApplicationConfig, 
    TranscriptionConfig, 
    TranscriptionMode,
    AudioConfig,
    HotkeyConfig
)


def configure_local_whisper():
    """Configure the application to use local Whisper."""
    print("ü§ñ Local Whisper Configuration")
    print("=" * 40)
    
    # Model selection
    print("\nüìã Available Whisper Models:")
    print("  tiny   - 39 MB  (fastest, least accurate)")
    print("  base   - 74 MB  (good balance)")
    print("  small  - 244 MB (more accurate)")
    print("  medium - 769 MB (very accurate)")
    print("  large  - 1550 MB (most accurate, slowest)")
    
    model_name = input("\nSelect model (default: base): ").strip() or "base"
    
    # Create configuration
    config = ApplicationConfig(
        hotkey_config=HotkeyConfig(key="shift", description="Shift key"),
        audio_config=AudioConfig(sample_rate=16000, channels=1),
        transcription_config=TranscriptionConfig(
            mode=TranscriptionMode.LOCAL_WHISPER,
            model_name=model_name
        ),
        auto_paste=True,
        beep_feedback=True,
        temp_directory="/tmp"
    )
    
    # Save configuration
    config_file = "voice_recorder_config.py"
    with open(config_file, "w") as f:
        f.write(f'''# Voice Recorder Configuration for Local Whisper
# Generated by configure_local_whisper.py

from voice_recorder.domain.models import (
    ApplicationConfig, 
    TranscriptionConfig, 
    TranscriptionMode,
    AudioConfig,
    HotkeyConfig
)

# Application configuration
config = ApplicationConfig(
    hotkey_config=HotkeyConfig(
        key="{config.hotkey_config.key}",
        description="{config.hotkey_config.description}"
    ),
    audio_config=AudioConfig(
        sample_rate={config.audio_config.sample_rate},
        channels={config.audio_config.channels}
    ),
    transcription_config=TranscriptionConfig(
        mode=TranscriptionMode.LOCAL_WHISPER,
        model_name="{config.transcription_config.model_name}"
    ),
    auto_paste={config.auto_paste},
    beep_feedback={config.beep_feedback},
    temp_directory="{config.temp_directory}"
)
''')
    
    print(f"\n‚úÖ Configuration saved to {config_file}")
    print(f"üìù Model: {model_name}")
    print(f"üé§ Hotkey: {config.hotkey_config.key}")
    print(f"üîä Sample Rate: {config.audio_config.sample_rate}Hz")
    print(f"üìã Auto-paste: {config.auto_paste}")
    
    print("\nüöÄ To run with this configuration:")
    print("  python -c \"import sys; sys.path.insert(0, 'src'); from voice_recorder.api.app import create_app; from voice_recorder_config import config; app = create_app(config); app.start()\"")
    
    print("\nüìñ Usage:")
    print("  1. Press and hold Shift key to start recording")
    print("  2. Speak clearly into your microphone")
    print("  3. Release Shift key to stop recording")
    print("  4. Wait for local transcription to complete")
    print("  5. Text will be pasted at your cursor position")


def test_local_whisper():
    """Test local Whisper installation."""
    print("\nüß™ Testing Local Whisper Installation")
    print("=" * 40)
    
    try:
        import whisper
        print("‚úÖ openai-whisper is installed")
        
        # Test model loading
        print("üì• Loading base model (this may take a moment)...")
        model = whisper.load_model("base")
        print("‚úÖ Base model loaded successfully")
        
        return True
    except ImportError:
        print("‚ùå openai-whisper not installed")
        print("   Install with: pip install openai-whisper")
        return False
    except Exception as e:
        print(f"‚ùå Error loading model: {e}")
        return False


def main():
    """Main function."""
    print("üé§ Voice Recorder - Local Whisper Setup")
    print("=" * 50)
    
    # Test installation
    if not test_local_whisper():
        print("\n‚ùå Please install openai-whisper first:")
        print("   pip install openai-whisper")
        return
    
    # Configure
    configure_local_whisper()
    
    print("\nüéâ Setup complete! You can now use local Whisper transcription.")


if __name__ == "__main__":
    main() 