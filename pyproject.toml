[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "voice-recorder"
version = "1.0.0"
description = "Professional voice recording application for macOS with OpenAI transcription (English only)"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Voice Recorder Team", email = "team@voicerecorder.app"}
]
maintainers = [
    {name = "Voice Recorder Team", email = "team@voicerecorder.app"}
]
keywords = ["voice", "recording", "transcription", "openai", "macos", "audio"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    "openai>=1.0.0",
    "python-dotenv>=1.0.0",
    "pynput>=1.7.0",
    "pyaudio>=0.2.0",
    "pydantic>=2.0.0",
    "ollama>=0.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
]
local = [
    "openai-whisper>=20250625",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/voicerecorder/voice-recorder"
Documentation = "https://voice-recorder.readthedocs.io/"
Repository = "https://github.com/voicerecorder/voice-recorder"
"Bug Tracker" = "https://github.com/voicerecorder/voice-recorder/issues"
Changelog = "https://github.com/voicerecorder/voice-recorder/blob/main/CHANGELOG.md"

[project.scripts]
voice-recorder = "voice_recorder.api.app:main"

[project.gui-scripts]
voice-recorder-gui = "voice_recorder.api.app:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["voice_recorder*"]

[tool.setuptools.package-data]
"voice_recorder" = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["voice_recorder"]
known_third_party = ["openai", "pynput", "pyaudio", "pydantic", "pytest"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pynput.*",
    "pyaudio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/voice_recorder",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.safety]
output = "json" 